int firstOcc(int arr[], int n, int x){
	    int start = 0, end = n-1;
	    
	    int index=-1;
	    
	    while(start<= end){
	        int mid = start+(end-start)/2;
	        
	        if(arr[mid] == x){
	            index = mid;
	            end = mid -1;
	        } else if (x > arr[mid]){
	            start = mid + 1;
	        } else {
	            end = mid -1;
	        }
	    }
	    
	    return index;
	}	
	
	int lastOcc(int arr[], int n, int x){
	    int start = 0, end = n-1;
	    
	    int index=-1;
	    
	    while(start<= end){
	        int mid = start+(end-start)/2;
	        
	        if(arr[mid] == x){
	            index = mid;
	            start = mid+1;
	        } else if (x > arr[mid]){
	            start = mid + 1;
	        } else {
	            end = mid -1;
	        }
	        
	    }
	    
	    return index;
	}
		
	int count(int arr[], int n, int x) {
        
        int firstIndex = firstOcc(arr, n, x);
        
        
        if(firstIndex != -1)
        {
            int lastIndex = lastOcc(arr, n, x);
            
            return lastIndex-firstIndex+1;
        }
 
        return 0;
        
    }
};


class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) 
	{
	    // code here
	    int count=0;
	    for(int i=0;i<n;i++)
	    {
	        if(x==arr[i])
	        {
	            count++;
	        }
	    }
	    return count;
	}
};
